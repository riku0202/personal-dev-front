import axios from "axios";
import type { NextPage } from "next";
import Head from "next/head";
import { useEffect, useRef, useState } from "react";
import styled from "styled-components";
import { NextSvg, Trash } from "../constants/Svg";

const Home: NextPage = () => {
  type Todo = {
    Id: string;
    Todo: string;
    Created: string;
    Updated: string;
  };

  const [todoList, setTodoList] = useState<Todo[]>([]);

  const apiClient = axios.create({
    baseURL: process.env.NEXT_PUBLIC_URL,
  });

  const ref = useRef<HTMLInputElement | null>(null);

  const getTodoList = async () => {
    const res = await apiClient.get<Todo[]>("/");
    setTodoList(res.data);
  };

  const addTodo = async (todo: string) => {
    const res = await apiClient.post<Todo[]>("/", {
      todo,
    });

    setTodoList(res.data);
  };

  const deleteTodo = async (id: string) => {
    const res = await apiClient.delete<Todo[]>("/", {
      params: {
        id,
      },
    });

    setTodoList(res.data);
  };

  const store = async () => {
    if (ref.current) {
      await addTodo(ref.current.value);
      ref.current.value = "";
    }
  };

  // Enterキーを押したときにメモを変更するためのイベント用関数
  const enter = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key == "Enter") {
      e.preventDefault();
      store();
    }
  };

  useEffect(() => {
    getTodoList();
  }, []);

  return (
    <Style>
      <Head>
        <title>Next.js Todo List</title>
        <meta name="description" content="Generated by create next app" />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1, minimum-scale=1, user-scalable=yes"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <nav className="title">
          <div className="logo">{NextSvg()}</div>
          <h1 className="name">Todo List</h1>
        </nav>
        <div className="contents">
          <div className="add">
            <input
              className="add-form"
              type="text"
              ref={ref}
              placeholder="TODO"
              onKeyDown={enter}
            />
            <button className="add-button" onClick={store}>
              ADD
            </button>
          </div>
          {todoList && (
            <ul className="items">
              {todoList.map((props, index) => (
                <li key={index} className="item">
                  {props.Todo}
                  <label className="trash" onClick={() => deleteTodo(props.Id)}>
                    {Trash()}
                  </label>
                </li>
              ))}
            </ul>
          )}
        </div>
      </main>
    </Style>
  );
};

export default Home;

const Style = styled.main`
  height: 100vh;
  background-color: ${({ theme }) => theme.colors.primary};

  main {
    .title {
      display: flex;
      align-items: center;
      padding: 0 0 0 20px;
      box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1),
        0 1px 2px 0 rgba(0, 0, 0, 0.06);
      svg {
        height: 90px;
        fill: #ffffff;
      }

      .name {
        color: #ffffff;
        margin: 0 0 0 25px;
        font-size: 30px;
      }
    }

    .contents {
      margin: 30px 0 0;
      color: #ffffff;

      .add {
        display: flex;
        gap: 20px;
        width: 100%;

        .add-form {
          line-height: 17px;
          padding: 10px;
          font-size: 15px;
          color: #ffffff;
          width: 100%;
          background-color: rgba(52, 58, 70);
          border-radius: 7px;
        }

        .add-button {
          background-color: rgba(8, 126, 164);
          font-size: 13px;
          padding: 10px;
          color: #ffffff;
          display: flex;
          justify-content: center;
          align-items: center;
          font-weight: bold;
          border-radius: 7px;

          :hover {
            background-color: rgba(8, 126, 164, 0.8);
          }
        }
      }

      .items {
        display: flex;
        flex-direction: column;
        font-size: 15px;
        line-height: 18px;
        gap: 10px;
        list-style: none;
        padding: 0;

        .item {
          display: flex;
          justify-content: space-between;
          align-items: center;
          border-radius: 7px;
          padding: 10px;
          background-color: rgba(52, 58, 70);

          .trash {
            cursor: pointer;
            svg {
              height: 20px;
              fill: #ffffff;
              :hover {
                fill: #ff0000;
              }
            }
          }
        }
      }

      @media screen and (max-width: 640px) {
        padding: 0 20px 0;
      }

      @media (min-width: 640px) and (max-width: 960px) {
        padding: 0 48px 0;
      }
      @media (min-width: 960px) {
        padding: 0 48px 0;
      }
    }
  }
`;
